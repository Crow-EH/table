{"version":3,"sources":["makeStreamConfig.js"],"names":[],"mappings":";;;;;;;;sBAAc,QAAQ;;;;mCACU,uBAAuB;;;;oCACtB,wBAAwB;;;;AAEzD,IAAI,UAAU,YAAA;IACV,WAAW,YAAA,CAAC;;;;;;;;AAQhB,UAAU,GAAG,YAAiB;QAAhB,MAAM,yDAAG,EAAE;;AACrB,WAAO,oBAAE,MAAM,CAAC,EAAE,EAAE,sCAAoB,WAAW,CAAC,EAAE,MAAM,CAAC,CAAC;CACjE,CAAC;;;;;;;;;;;AAWF,WAAW,GAAG,UAAC,WAAW,EAAuC;QAArC,OAAO,yDAAG,EAAE;QAAE,aAAa,yDAAG,EAAE;;AACxD,wBAAE,KAAK,CAAC,WAAW,EAAE,UAAC,KAAK,EAAK;AAC5B,YAAI,oBAAE,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE;AAC/B,mBAAO,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;SACvB;;AAED,eAAO,CAAC,KAAK,CAAC,GAAG,oBAAE,MAAM,CAAC;AACtB,qBAAS,EAAE,MAAM;;AAEjB,oBAAQ,EAAE,KAAK;AACf,oBAAQ,EAAE,QAAQ;AAClB,uBAAW,EAAE,CAAC;AACd,wBAAY,EAAE,CAAC;SAClB,EAAE,aAAa,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;KACrC,CAAC,CAAC;;AAEH,WAAO,OAAO,CAAC;CAClB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;qBA0Ba,YAAqB;QAApB,UAAU,yDAAG,EAAE;;AAC3B,QAAI,MAAM,YAAA,CAAC;;AAEX,2CAAqB,UAAU,CAAC,CAAC;;AAEjC,UAAM,GAAG,oBAAE,SAAS,CAAC,UAAU,CAAC,CAAC;;AAEjC,QAAI,CAAC,MAAM,CAAC,aAAa,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,EAAE;AACtD,cAAM,IAAI,KAAK,CAAC,iEAAiE,CAAC,CAAC;KACtF;;AAED,QAAI,CAAC,MAAM,CAAC,WAAW,EAAE;AACrB,cAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;KACvD;;AAED,UAAM,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAC1C,UAAM,CAAC,OAAO,GAAG,WAAW,CAAC,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,aAAa,CAAC,CAAC;;AAEvF,WAAO,MAAM,CAAC;CACjB","file":"makeStreamConfig.js","sourcesContent":["import _ from 'lodash';\nimport getBorderCharacters from './getBorderCharacters';\nimport validateStreamConfig from './validateStreamConfig';\n\nlet makeBorder,\n    makeColumns;\n\n/**\n * Merges user provided border characters with the default border (\"honeywell\") characters.\n *\n * @param {Object} border\n * @returns {Object}\n */\nmakeBorder = (border = {}) => {\n    return _.assign({}, getBorderCharacters('honeywell'), border);\n};\n\n/**\n * Creates a configuration for every column using default\n * values for the missing configuration properties.\n *\n * @param {number} columnCount\n * @param {Object} columns\n * @param {Object} columnDefault\n * @returns {Object}\n */\nmakeColumns = (columnCount, columns = {}, columnDefault = {}) => {\n    _.times(columnCount, (index) => {\n        if (_.isUndefined(columns[index])) {\n            columns[index] = {};\n        }\n\n        columns[index] = _.assign({\n            alignment: 'left',\n            // width: columnDefault.width,\n            wrapWord: false,\n            truncate: Infinity,\n            paddingLeft: 1,\n            paddingRight: 1\n        }, columnDefault, columns[index]);\n    });\n\n    return columns;\n};\n\n/**\n * @typedef {Object} columnConfig\n * @property {string} alignment\n * @property {number} width\n * @property {number} truncate\n * @property {number} paddingLeft\n * @property {number} paddingRight\n */\n\n/**\n * @typedef {Object} streamConfig\n * @property {columnConfig} columnDefault\n * @property {Object} border\n * @property {columnConfig[]}\n * @property {number} columnCount Number of columns in the table (required).\n */\n\n/**\n * Makes a new configuration object out of the userConfig object\n * using default values for the missing configuration properties.\n *\n * @param {streamConfig} userConfig\n * @returns {Object}\n */\nexport default (userConfig = {}) => {\n    let config;\n\n    validateStreamConfig(userConfig);\n\n    config = _.cloneDeep(userConfig);\n\n    if (!config.columnDefault || !config.columnDefault.width) {\n        throw new Error('Must provide config.columnDefault.width when creating a stream.');\n    }\n\n    if (!config.columnCount) {\n        throw new Error('Must provide config.columnCount.');\n    }\n\n    config.border = makeBorder(config.border);\n    config.columns = makeColumns(config.columnCount, config.columns, config.columnDefault);\n\n    return config;\n};\n"],"sourceRoot":"/source/"}