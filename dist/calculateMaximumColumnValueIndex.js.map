{"version":3,"sources":["calculateMaximumColumnValueIndex.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;2BACwB,cAAc;;;;;;;;;;;;;qBAQvB,UAAC,IAAI,EAAK;AACrB,QAAI,OAAO,YAAA,CAAC;;AAEZ,QAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;AACV,cAAM,IAAI,KAAK,uCAAuC,CAAC;KAC1D;;AAED,WAAO,GAAG,kCAAO,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;;AAE3C,8CAAU,IAAI,EAAE,UAAC,GAAG,EAAK;AACrB,kDAAU,GAAG,EAAE,UAAC,KAAK,EAAE,MAAM,EAAK;AAC9B,gBAAI,WAAW,YAAA,CAAC;;AAEhB,uBAAW,GAAG,8BAAY,KAAK,CAAC,CAAC;;AAEjC,gBAAI,wCAAc,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,OAAO,CAAC,MAAM,CAAC,GAAG,WAAW,EAAE;AACjE,uBAAO,CAAC,MAAM,CAAC,GAAG,WAAW,CAAC;aACjC;SACJ,CAAC,CAAC;KACN,CAAC,CAAC;;AAEH,WAAO,OAAO,CAAC;CAClB","file":"calculateMaximumColumnValueIndex.js","sourcesContent":["import _ from 'lodash';\nimport stringWidth from 'string-width';\n\n/**\n * Produces an array of values that describe the largest value length in the column.\n *\n * @param {Array[]} rows\n * @return {Number[]}\n */\nexport default (rows) => {\n    let columns;\n\n    if (!rows[0]) {\n        throw new Error(`Dataset must have at least one row.`);\n    }\n\n    columns = _.fill(Array(rows[0].length), 0);\n\n    _.forEach(rows, (row) => {\n        _.forEach(row, (value, index0) => {\n            let valueLength;\n\n            valueLength = stringWidth(value);\n\n            if (_.isUndefined(columns[index0]) || columns[index0] < valueLength) {\n                columns[index0] = valueLength;\n            }\n        });\n    });\n\n    return columns;\n};\n"],"sourceRoot":"/source/"}