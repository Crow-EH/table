{"version":3,"sources":["mapDataUsingRowSpanIndex.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;yBAEkB,YAAY;;;;2BAEN,cAAc;;;;qBAEpB,SAAS;;;;;;;;;;;;;qBAQZ,UAAC,YAAY,EAAE,YAAY,EAAE,MAAM,EAAK;AACnD,QAAI,UAAU,YAAA;QACV,UAAU,YAAA,CAAC;;AAEf,cAAU,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;;;;AAIpC,cAAU,GAAG,sCAAM,YAAY,EAAE,UAAC,KAAK,EAAE,MAAM,EAAK;AAChD,YAAI,OAAO,YAAA,CAAC;;AAEZ,eAAO,GAAG,sCAAM,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,EAAE,YAAM;AAC/C,mBAAO,kCAAO,KAAK,CAAC,UAAU,CAAC,EAAE,EAAE,CAAC,CAAC;SACxC,CAAC,CAAC;;;;;;;;AAQH,kDAAU,KAAK,EAAE,UAAC,KAAK,EAAE,MAAM,EAAK;AAChC,gBAAI,YAAY,YAAA,CAAC;;AAEjB,wBAAY,GAAG,wBAAM,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC;;AAE5D,sDAAU,YAAY,EAAE,UAAC,IAAI,EAAE,MAAM,EAAK;AACtC,uBAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;aAClC,CAAC,CAAC;SACN,CAAC,CAAC;;AAEH,eAAO,OAAO,CAAC;KAClB,CAAC,CAAC;;AAEH,WAAO,qCAAU,UAAU,CAAC,CAAC;CAChC","file":"mapDataUsingRowSpanIndex.js","sourcesContent":["import _ from 'lodash';\n\nimport slice from 'ansi-slice';\n\nimport stringWidth from 'string-width';\n\nimport chunk from './chunk';\n\n/**\n * @param {Array} unmappedRows\n * @param {Number[]} rowSpanIndex\n * @param {Object} config\n * @return {Array}\n */\nexport default (unmappedRows, rowSpanIndex, config) => {\n    let tableWidth,\n        mappedRows;\n\n    tableWidth = unmappedRows[0].length;\n\n    // console.log(`unmappedRows`, unmappedRows, `rowSpanIndex`, rowSpanIndex, `config`, config, `tableWidth`, tableWidth);\n\n    mappedRows = _.map(unmappedRows, (cells, index0) => {\n        let rowSpan;\n\n        rowSpan = _.map(Array(rowSpanIndex[index0]), () => {\n            return _.fill(Array(tableWidth), '');\n        });\n\n        // console.log(`rowSpan`, rowSpan);\n\n        // rowSpan\n        //     [{row index within rowSaw; index2}]\n        //     [{cell index within a virtual row; index1}]\n\n        _.forEach(cells, (value, index1) => {\n            let chunkedValue;\n\n            chunkedValue = chunk(value, config.column[index1].maxWidth);\n\n            _.forEach(chunkedValue, (part, index2) => {\n                rowSpan[index2][index1] = part;\n            });\n        });\n\n        return rowSpan;\n    });\n\n    return _.flatten(mappedRows);\n};\n"],"sourceRoot":"/source/"}