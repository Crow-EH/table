{"version":3,"sources":["makeConfig.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;sBAEmB,WAAW;;;;8BACH,kBAAkB;;;;gDACA,oCAAoC;;;;;;;;;;;;qBAOlE,UAAC,IAAI,EAAuB;QAArB,WAAW,yDAAG,EAAE;;AAClC,QAAI,MAAM,YAAA;QACN,uBAAuB,YAAA,CAAC;;AAE5B,UAAM,GAAG,sCAAY,WAAW,CAAC,CAAC;;AAElC,qCAAe,IAAI,EAAE,MAAM,CAAC,CAAC;;AAE7B,QAAI,CAAC,MAAM,CAAC,MAAM,EAAE;AAChB,cAAM,CAAC,MAAM,GAAG,EAAE,CAAA;KACrB;;AAED,UAAM,CAAC,MAAM,GAAG,qCAAS,EAAE,EAAE,qCAAmB,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;;AAEjE,2BAAuB,GAAG,mDAAiC,IAAI,CAAC,CAAC;;AAEjE,QAAI,CAAC,MAAM,CAAC,MAAM,EAAE;AAChB,cAAM,CAAC,MAAM,GAAG,EAAE,CAAC;KACtB;;AAED,yCAAQ,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,UAAC,KAAK,EAAK;AAC/B,YAAI,wCAAc,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;AACrC,kBAAM,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;SAC7B;KACJ,CAAC,CAAC;;AAEH,UAAM,CAAC,MAAM,GAAG,wCAAY,MAAM,CAAC,MAAM,EAAE,UAAC,MAAM,EAAE,MAAM,EAAK;AAC3D,YAAI,wCAAc,MAAM,CAAC,QAAQ,CAAC,IAAI,uBAAuB,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE;AACpG,kBAAM,CAAC,QAAQ,GAAG,uBAAuB,CAAC,MAAM,CAAC,CAAC;SACrD;;AAED,YAAI,wCAAc,MAAM,CAAC,SAAS,CAAC,EAAE;AACjC,kBAAM,CAAC,SAAS,SAAS,CAAC;SAC7B;;AAED,YAAI,wCAAc,MAAM,CAAC,QAAQ,CAAC,EAAE;AAChC,kBAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC9B,MAAM,IAAI,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,EAAE;AAC1C,kBAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;SACrC;;AAED,YAAI,wCAAc,MAAM,CAAC,WAAW,CAAC,EAAE;AACnC,kBAAM,CAAC,WAAW,GAAG,CAAC,CAAC;SAC1B;;AAED,YAAI,wCAAc,MAAM,CAAC,YAAY,CAAC,EAAE;AACpC,kBAAM,CAAC,YAAY,GAAG,CAAC,CAAC;SAC3B;;AAED,eAAO,MAAM,CAAC;KACjB,CAAC,CAAC;;AAEH,WAAO,MAAM,CAAC;CACjB","file":"makeConfig.js","sourcesContent":["import _ from 'lodash';\n\nimport border from './border/';\nimport validateConfig from './validateConfig';\nimport calculateMaximumColumnValueIndex from './calculateMaximumColumnValueIndex';\n\n/**\n * @param {Array[]} rows\n * @param {Object} inputConfig\n * @return {Object}\n */\nexport default (rows, inputConfig = {}) => {\n    let config,\n        maximumColumnValueIndex;\n\n    config = _.cloneDeep(inputConfig);\n\n    validateConfig(rows, config);\n\n    if (!config.border) {\n        config.border = {}\n    }\n\n    config.border = _.assign({}, border(`honeywell`), config.border);\n\n    maximumColumnValueIndex = calculateMaximumColumnValueIndex(rows);\n\n    if (!config.column) {\n        config.column = {};\n    }\n\n    _.times(rows[0].length, (index) => {\n        if (_.isUndefined(config.column[index])) {\n            config.column[index] = {};\n        }\n    });\n\n    config.column = _.mapValues(config.column, (column, index0) => {\n        if (_.isUndefined(column.minWidth) || maximumColumnValueIndex[index0] > config.column[index0].minWidth) {\n            column.minWidth = maximumColumnValueIndex[index0];\n        }\n\n        if (_.isUndefined(column.alignment)) {\n            column.alignment = `left`;\n        }\n\n        if (_.isUndefined(column.maxWidth)) {\n            column.maxWidth = Infinity;\n        } else if (column.maxWidth < column.minWidth) {\n            column.minWidth = column.maxWidth;\n        }\n\n        if (_.isUndefined(column.paddingLeft)) {\n            column.paddingLeft = 0;\n        }\n\n        if (_.isUndefined(column.paddingRight)) {\n            column.paddingRight = 0;\n        }\n\n        return column;\n    });\n\n    return config;\n};\n"],"sourceRoot":"/source/"}