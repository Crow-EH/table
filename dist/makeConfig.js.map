{"version":3,"sources":["makeConfig.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;mCACgC,uBAAuB;;;;8BAC5B,kBAAkB;;;;gDACA,oCAAoC;;;;;;AAEjF,IAAI,UAAU,YAAA;IACV,WAAW,YAAA,CAAC;;;;;;;;AAQhB,UAAU,GAAG,YAAiB;QAAhB,MAAM,yDAAG,EAAE;;AACrB,WAAO,qCAAS,EAAE,EAAE,kDAAgC,EAAE,MAAM,CAAC,CAAC;CACjE,CAAC;;;;;;;;;;AAUF,WAAW,GAAG,UAAC,IAAI,EAAmB;QAAjB,OAAO,yDAAG,EAAE;;AAC7B,QAAI,uBAAuB,YAAA,CAAC;;AAE5B,2BAAuB,GAAG,mDAAiC,IAAI,CAAC,CAAC;;AAEjE,yCAAQ,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,UAAC,KAAK,EAAK;AAC/B,YAAI,wCAAc,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE;AAC/B,mBAAO,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;SACvB;;AAED,YAAI,wCAAc,OAAO,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,EAAE;AACzC,mBAAO,CAAC,KAAK,CAAC,CAAC,SAAS,SAAS,CAAC;SACrC;;AAED,YAAI,wCAAc,OAAO,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,EAAE;AACrC,mBAAO,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,uBAAuB,CAAC,KAAK,CAAC,CAAC;SACzD;;AAED,YAAI,wCAAc,OAAO,CAAC,KAAK,CAAC,CAAC,WAAW,CAAC,EAAE;AAC3C,mBAAO,CAAC,KAAK,CAAC,CAAC,WAAW,GAAG,CAAC,CAAC;SAClC;;AAED,YAAI,wCAAc,OAAO,CAAC,KAAK,CAAC,CAAC,YAAY,CAAC,EAAE;AAC5C,mBAAO,CAAC,KAAK,CAAC,CAAC,YAAY,GAAG,CAAC,CAAC;SACnC;KACJ,CAAC,CAAC;;AAEH,WAAO,OAAO,CAAC;CAClB,CAAC;;;;;;;;;;;qBAUa,UAAC,IAAI,EAAsB;QAApB,UAAU,yDAAG,EAAE;;AACjC,QAAI,MAAM,YAAA,CAAC;;AAEX,qCAAe,UAAU,CAAC,CAAC;;AAE3B,UAAM,GAAG,sCAAY,UAAU,CAAC,CAAC;;AAEjC,UAAM,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAC1C,UAAM,CAAC,OAAO,GAAG,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;;AAEnD,WAAO,MAAM,CAAC;CACjB","file":"makeConfig.js","sourcesContent":["import _ from 'lodash';\nimport getBorderCharacters from './getBorderCharacters';\nimport validateConfig from './validateConfig';\nimport calculateMaximumColumnWidthIndex from './calculateMaximumColumnWidthIndex';\n\nlet makeBorder,\n    makeColumns;\n\n/**\n * Merges user provided border characters with the default border (\"honeywell\") characters.\n *\n * @param {Object} border\n * @return {Object}\n */\nmakeBorder = (border = {}) => {\n    return _.assign({}, getBorderCharacters(`honeywell`), border);\n};\n\n/**\n * Creates a configuration for every column using default\n * values for the missing configuration properties.\n *\n * @param {Array[]} rows\n * @param {Object} columns\n * @return {Object}\n */\nmakeColumns = (rows, columns = {}) => {\n    let maximumColumnWidthIndex;\n\n    maximumColumnWidthIndex = calculateMaximumColumnWidthIndex(rows);\n\n    _.times(rows[0].length, (index) => {\n        if (_.isUndefined(columns[index])) {\n            columns[index] = {};\n        }\n\n        if (_.isUndefined(columns[index].alignment)) {\n            columns[index].alignment = `left`;\n        }\n\n        if (_.isUndefined(columns[index].width)) {\n            columns[index].width = maximumColumnWidthIndex[index];\n        }\n\n        if (_.isUndefined(columns[index].paddingLeft)) {\n            columns[index].paddingLeft = 1;\n        }\n\n        if (_.isUndefined(columns[index].paddingRight)) {\n            columns[index].paddingRight = 1;\n        }\n    });\n\n    return columns;\n};\n\n/**\n * Makes a new configuration object out of the userConfig object\n * using default values for the missing configuration properties.\n *\n * @param {Array[]} rows\n * @param {Object} userConfig\n * @return {Object}\n */\nexport default (rows, userConfig = {}) => {\n    let config;\n\n    validateConfig(userConfig);\n\n    config = _.cloneDeep(userConfig);\n\n    config.border = makeBorder(config.border);\n    config.columns = makeColumns(rows, config.columns);\n\n    return config;\n};\n"],"sourceRoot":"/source/"}