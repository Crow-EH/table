{"version":3,"sources":["align.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;2BACwB,cAAc;;;;;;AAEtC,IAAI,UAAU,YAAA,CAAC;;AAEf,UAAU,GAAG,2BAIZ,CAAC;;;;;;;;;qBAQa,UAAC,OAAO,EAAE,cAAc,EAAE,SAAS,EAAK;AACnD,QAAI,cAAc,YAAA;QACd,kBAAkB,YAAA;QAClB,YAAY,YAAA,CAAC;;AAEjB,QAAI,CAAC,qCAAW,OAAO,CAAC,EAAE;AACtB,cAAM,IAAI,KAAK,6CAA6C,CAAC;KAChE;;AAED,QAAI,CAAC,qCAAW,cAAc,CAAC,EAAE;AAC7B,cAAM,IAAI,KAAK,qDAAqD,CAAC;KACxE;;AAED,gBAAY,GAAG,8BAAY,OAAO,CAAC,CAAC;;AAEpC,QAAI,YAAY,GAAG,cAAc,EAAE;AAC/B,cAAM,IAAI,KAAK,6EAA6E,CAAC;KAChG;;AAED,QAAI,CAAC,qCAAW,SAAS,CAAC,EAAE;AACxB,cAAM,IAAI,KAAK,+CAA+C,CAAC;KAClE;;AAED,QAAI,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE;AACtC,cAAM,IAAI,KAAK,8FAA8F,CAAC;KACjH;;AAED,kBAAc,GAAG,cAAc,GAAG,YAAY,CAAC;;AAE/C,QAAI,SAAS,WAAW,EAAE;AACtB,eAAO,OAAO,GAAG,0CAAc,cAAc,CAAC,CAAC;KAClD;;AAED,QAAI,SAAS,YAAY,EAAE;AACvB,eAAO,0CAAc,cAAc,CAAC,GAAG,OAAO,CAAC;KAClD;;AAED,sBAAkB,GAAG,cAAc,GAAG,CAAC,CAAC;;AAExC,QAAI,kBAAkB,GAAG,CAAC,KAAK,CAAC,EAAE;AAC9B,eAAO,0CAAc,kBAAkB,CAAC,GAAG,OAAO,GAAG,0CAAc,kBAAkB,CAAC,CAAC;KAC1F,MAAM;AACH,0BAAkB,GAAG,kCAAQ,kBAAkB,CAAC,CAAC;;AAEjD,eAAO,0CAAc,kBAAkB,CAAC,GAAG,OAAO,GAAG,0CAAc,kBAAkB,GAAG,CAAC,CAAC,CAAC;KAC9F;CACJ","file":"align.js","sourcesContent":["import _ from 'lodash';\nimport stringWidth from 'string-width';\n\nlet alignments;\n\nalignments = [\n    `left`,\n    `right`,\n    `center`\n];\n\n/**\n * @param {String} subject\n * @param {Number} containerWidth\n * @param {String} alignment (left, right, center)\n * @return {String}\n */\nexport default (subject, containerWidth, alignment) => {\n    let availableWidth,\n        halfAvailableWidth,\n        subjectWidth;\n\n    if (!_.isString(subject)) {\n        throw new Error(`Subject parameter value must be a string.`);\n    }\n\n    if (!_.isNumber(containerWidth)) {\n        throw new Error(`Container width parameter value must be a number.`);\n    }\n\n    subjectWidth = stringWidth(subject);\n\n    if (subjectWidth > containerWidth) {\n        throw new Error(`Subject parameter value width cannot be greater than the container width.`);\n    }\n\n    if (!_.isString(alignment)) {\n        throw new Error(`Alignment parameter value must be a string.`);\n    }\n\n    if (alignments.indexOf(alignment) === -1) {\n        throw new Error(`Alignment parameter value must be a known alignment parameter value (left, right, center).`);\n    }\n\n    availableWidth = containerWidth - subjectWidth;\n\n    if (alignment === `left`) {\n        return subject + _.repeat(` `, availableWidth);\n    }\n\n    if (alignment === `right`) {\n        return _.repeat(` `, availableWidth) + subject;\n    }\n\n    halfAvailableWidth = availableWidth / 2;\n\n    if (halfAvailableWidth % 2 === 0) {\n        return _.repeat(` `, halfAvailableWidth) + subject + _.repeat(` `, halfAvailableWidth);\n    } else {\n        halfAvailableWidth = _.floor(halfAvailableWidth);\n\n        return _.repeat(` `, halfAvailableWidth) + subject + _.repeat(` `, halfAvailableWidth + 1);\n    }\n};\n"],"sourceRoot":"/source/"}