{"version":3,"sources":["table.js"],"names":[],"mappings":";;;;;;;;;;yBACsB,aAAa;;;;wCACE,4BAA4B;;;;0BAC1C,cAAc;;;;qCACH,yBAAyB;;;;wCACtB,4BAA4B;;;;2BACzC,cAAc;;;;qBACpB,SAAS;;;;4BACF,gBAAgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qBAqD1B,UAAC,IAAI,EAAkB;QAAhB,MAAM,yDAAG,EAAE;;AAC7B,QAAI,aAAa,YAAA;QACb,QAAQ,YAAA;QACR,YAAY,YAAA;QACZ,eAAe,YAAA;QACf,2BAA2B,YAAA;QAC3B,WAAW,YAAA,CAAC;;AAEhB,mCAAa,IAAI,CAAC,CAAC;;AAEnB,YAAQ,GAAG,sCAAM,IAAI,EAAE,UAAC,OAAO,EAAK;AAChC,eAAO,sCAAM,OAAO,EAAE,MAAM,CAAC,CAAC;KACjC,CAAC,CAAC;;;;AAIH,iBAAa,GAAG,6BAAW,QAAQ,EAAE,MAAM,CAAC,CAAC;;;;AAI7C,gBAAY,GAAG,wCAAsB,QAAQ,EAAE,aAAa,CAAC,CAAC;;;;AAI9D,+BAA2B,GAAG,2CAAyB,QAAQ,EAAE,YAAY,EAAE,aAAa,CAAC,CAAC;;;;AAI9F,+BAA2B,GAAG,sCAAM,2BAA2B,EAAE,UAAC,KAAK,EAAE,MAAM,EAAK;AAChF,eAAO,sCAAM,KAAK,EAAE,UAAC,KAAK,EAAE,MAAM,EAAK;AACnC,gBAAI,MAAM,YAAA,CAAC;;AAEX,kBAAM,GAAG,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;;;;AAItC,gBAAI,8BAAY,KAAK,CAAC,KAAK,MAAM,CAAC,QAAQ,EAAE;AACxC,uBAAO,KAAK,CAAC;aAChB,MAAM;AACH,uBAAO,wBAAM,KAAK,EAAE,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,SAAS,CAAC,CAAC;aAC1D;SACJ,CAAC,CAAC;KACN,CAAC,CAAC;;AAEH,mBAAe,GAAG,2CAAyB,2BAA2B,CAAC,CAAC,CAAC,CAAC,CAAC;;;;AAI3E,WAAO,4BAAU,2BAA2B,EAAE,aAAa,CAAC,MAAM,EAAE,eAAe,EAAE,YAAY,CAAC,CAAC;CACtG","file":"table.js","sourcesContent":["import _ from 'lodash';\nimport drawTable from './drawTable';\nimport calculateColumnSizeIndex from './calculateColumnSizeIndex';\nimport makeConfig from './makeConfig';\nimport calculateRowSpanIndex from './calculateRowSpanIndex';\nimport mapDataUsingRowSpanIndex from './mapDataUsingRowSpanIndex';\nimport stringWidth from 'string-width';\nimport align from './align';\nimport validateData from './validateData';\n\n/**\n * @typedef {String} table~cell\n */\n\n/**\n * @typedef {table~cell[]} table~row\n */\n\n/**\n * @typedef {Object} table~configColumn\n * @property {String} alignment\n * @property {Number} minWidth\n * @property {Number} maxWidth\n */\n\n/**\n * @typedef {Object} table~configBorder\n * @property {String} topBody\n * @property {String} topJoin\n * @property {String} topLeft\n * @property {String} topRight\n * @property {String} bottomBody\n * @property {String} bottomJoin\n * @property {String} bottomLeft\n * @property {String} bottomRight\n * @property {String} bodyLeft\n * @property {String} bodyRight\n * @property {String} bodyJoin\n * @property {String} joinBody\n * @property {String} joinLeft\n * @property {String} joinRight\n * @property {String} joinJoin\n */\n\n/**\n * @typedef {Object} table~config\n * @property {table~configBorder}\n * @property {table~configColumn[]} column Column specific configuration.\n */\n\n/**\n * Transforms data rows to rows fit for printing in the CLI. Transformation consists of\n * enforcing a fixed text width for values that are shorter than columnWidth and\n * breaking values that are longer than columnWidth into two or more rows.\n *\n * The current implementation assumes RTL text alignment.\n *\n * @param {table~row[]} rows\n * @param {table~config} config\n * @return {Array[]}\n */\nexport default (rows, config = {}) => {\n    let derivedConfig,\n        safeData,\n        rowSpanIndex,\n        columnSizeIndex,\n        dataMappedUsingRowSpanIndex,\n        tableBorder;\n\n    validateData(rows);\n\n    safeData = _.map(rows, (columns) => {\n        return _.map(columns, String);\n    });\n\n    // console.log(`safeData`, safeData);\n\n    derivedConfig = makeConfig(safeData, config);\n\n    // console.log(`derivedConfig`, derivedConfig);\n\n    rowSpanIndex = calculateRowSpanIndex(safeData, derivedConfig);\n\n    // console.log(`rowSpanIndex`, rowSpanIndex);\n\n    dataMappedUsingRowSpanIndex = mapDataUsingRowSpanIndex(safeData, rowSpanIndex, derivedConfig);\n\n    // console.log(`dataMappedUsingRowSpanIndex`, dataMappedUsingRowSpanIndex);\n\n    dataMappedUsingRowSpanIndex = _.map(dataMappedUsingRowSpanIndex, (cells, index0) => {\n        return _.map(cells, (value, index1) => {\n            let column;\n\n            column = derivedConfig.column[index1];\n\n            // console.log(column);\n\n            if (stringWidth(value) === column.maxWidth) {\n                return value;\n            } else {\n                return align(value, column.minWidth, column.alignment);\n            }\n        });\n    });\n\n    columnSizeIndex = calculateColumnSizeIndex(dataMappedUsingRowSpanIndex[0]);\n\n    // console.log(`columnSizeIndex`, columnSizeIndex);\n\n    return drawTable(dataMappedUsingRowSpanIndex, derivedConfig.border, columnSizeIndex, rowSpanIndex);\n};\n"],"sourceRoot":"/source/"}