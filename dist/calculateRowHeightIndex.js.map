{"version":3,"sources":["calculateRowHeightIndex.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;2BACwB,cAAc;;;;mCACN,uBAAuB;;;;;;;;;;;;;;qBASxC,UAAC,IAAI,EAAE,MAAM,EAAK;AAC7B,QAAI,YAAY,YAAA;QACZ,UAAU,YAAA,CAAC;;AAEf,cAAU,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;;AAE5B,gBAAY,GAAG,EAAE,CAAC;;AAElB,0CAAM,IAAI,EAAE,UAAC,KAAK,EAAK;AACnB,YAAI,eAAe,YAAA,CAAC;;AAEpB,uBAAe,GAAG,kCAAO,KAAK,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;;AAE/C,kDAAU,KAAK,EAAE,UAAC,KAAK,EAAE,MAAM,EAAK;AAChC,2BAAe,CAAC,MAAM,CAAC,GAAG,sCAAoB,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC;SACrF,CAAC,CAAC;;AAEH,oBAAY,CAAC,IAAI,CAAC,sCAAM,eAAe,CAAC,CAAC,CAAC;KAC7C,CAAC,CAAC;;AAEH,WAAO,YAAY,CAAC;CACvB","file":"calculateRowHeightIndex.js","sourcesContent":["import _ from 'lodash';\nimport stringWidth from 'string-width';\nimport calculateCellHeight from './calculateCellHeight';\n\n/**\n * Calculates the vertical row span index.\n *\n * @param {Array[]} rows\n * @param {Object} config\n * @return {number[]}\n */\nexport default (rows, config) => {\n    let rowSpanIndex,\n        tableWidth;\n\n    tableWidth = rows[0].length;\n\n    rowSpanIndex = [];\n\n    _.map(rows, (cells) => {\n        let cellHeightIndex;\n\n        cellHeightIndex = _.fill(Array(tableWidth), 1);\n\n        _.forEach(cells, (value, index1) => {\n            cellHeightIndex[index1] = calculateCellHeight(value, config.column[index1].width);\n        });\n\n        rowSpanIndex.push(_.max(cellHeightIndex));\n    });\n\n    return rowSpanIndex;\n};\n"],"sourceRoot":"/source/"}