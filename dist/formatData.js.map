{"version":3,"sources":["formatData.js"],"names":[],"mappings":";;;;;;;;;;;;;;0BAIuB,cAAc;;;;;;yBAEnB,YAAY;;;;2BAEN,cAAc;;;;qBAEpB,SAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qBAyBZ,UAAC,IAAI,EAAkB;QAAhB,MAAM,yDAAG,EAAE;;AAC7B,QAAI,aAAa,YAAA;QACb,aAAa,YAAA;QACb,MAAM,YAAA,CAAC;;AAEX,UAAM,GAAG,CAAC,CAAC;;AAEX,iBAAa,GAAG,sCAAM,IAAI,EAAE,UAAC,OAAO,EAAK;AACrC,eAAO,sCAAM,OAAO,EAAE,UAAC,IAAI,EAAK;AAC5B,mBAAO,MAAM,CAAC,IAAI,CAAC,CAAC;SACvB,CAAC,CAAC;KACN,CAAC,CAAC;;AAEH,iBAAa,GAAG,6BAAW,aAAa,EAAE,MAAM,CAAC,CAAC;;;AAG9C,YAAI,OAAO,YAAA;YACP,GAAG,YAAA,CAAC;;AAER,WAAG,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;;AAE5B,qBAAa,CAAC,MAAM,CAAC,GAAG,sCAAM,aAAa,CAAC,MAAM,CAAC,EAAE,UAAC,KAAK,EAAE,MAAM,EAAK;AACpE,gBAAI,YAAY,YAAA,CAAC;;AAEjB,wBAAY,GAAG,aAAa,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;;AAElD,gBAAI,8BAAY,KAAK,CAAC,GAAG,YAAY,CAAC,QAAQ,EAAE;AAC5C,oBAAI,CAAC,OAAO,EAAE;AACV,2BAAO,GAAG,kCAAO,EAAE,MAAM,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;;AAExC,iCAAa,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;iBAChD;;AAED,uBAAO,CAAC,MAAM,CAAC,GAAG,4BAAM,KAAK,EAAE,YAAY,CAAC,QAAQ,CAAC,CAAC;;AAEtD,uBAAO,4BAAM,KAAK,EAAE,CAAC,EAAE,YAAY,CAAC,QAAQ,CAAC,CAAC;aACjD;;AAED,mBAAO,wBAAM,KAAK,EAAE,YAAY,CAAC,QAAQ,EAAE,YAAY,CAAC,SAAS,CAAC,CAAC;SACtE,CAAC,CAAC;;AAEH,cAAM,EAAE,CAAC;;;AA1Bb,WAAO,MAAM,GAAG,aAAa,CAAC,MAAM,EAAE;;KA2BrC;;AAED,WAAO,aAAa,CAAC;CACxB","file":"formatData.js","sourcesContent":["/* eslint-disable no-loop-func */\n\nimport _ from 'lodash';\n\nimport makeConfig from './makeConfig';\n\nimport slice from 'ansi-slice';\n\nimport stringWidth from 'string-width';\n\nimport align from './align';\n\n/**\n * @typedef formatData~columnConfig\n * @property {String} align\n * @property {Number} minWidth\n * @property {Number} maxWidth\n */\n\n/**\n * @typedef formatData~config\n * @property {formatData~columnConfig[]} columnConfig Column specific configuration.\n */\n\n/**\n * Transforms data rows to rows fit for printing in the CLI. Transformation consists of\n * enforcing a fixed text width for values that are shorter than columnWidth and\n * breaking values that are longer than columnWidth into two or more rows.\n *\n * The current implementation assumes RTL text alignment.\n *\n * @param {Array[]} rows\n * @param {formatData~config} config\n * @return {Array[]}\n */\nexport default (rows, config = {}) => {\n    let derivedConfig,\n        formattedData,\n        index0;\n\n    index0 = 0;\n\n    formattedData = _.map(rows, (columns) => {\n        return _.map(columns, (cell) => {\n            return String(cell);\n        });\n    });\n\n    derivedConfig = makeConfig(formattedData, config);\n\n    while (index0 < formattedData.length) {\n        let nextRow,\n            row;\n\n        row = formattedData[index0];\n\n        formattedData[index0] = _.map(formattedData[index0], (value, index1) => {\n            let columnConfig;\n\n            columnConfig = derivedConfig.columnConfig[index1];\n\n            if (stringWidth(value) > columnConfig.maxWidth) {\n                if (!nextRow) {\n                    nextRow = _.fill([], ``, 0, row.length);\n\n                    formattedData.splice(index0 + 1, 0, nextRow);\n                }\n\n                nextRow[index1] = slice(value, columnConfig.maxWidth);\n\n                return slice(value, 0, columnConfig.maxWidth);\n            }\n\n            return align(value, columnConfig.minWidth, columnConfig.alignment);\n        });\n\n        index0++;\n    }\n\n    return formattedData;\n};\n"],"sourceRoot":"/source/"}