{"version":3,"sources":["calculateRowSpanIndex.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;2BACwB,cAAc;;;;;;;;;;;;qBAOvB,UAAC,IAAI,EAAE,MAAM,EAAK;AAC7B,QAAI,YAAY,YAAA;QACZ,UAAU,YAAA,CAAC;;AAEf,cAAU,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;;AAE5B,gBAAY,GAAG,EAAE,CAAC;;AAElB,0CAAM,IAAI,EAAE,UAAC,KAAK,EAAK;AACnB,YAAI,eAAe,YAAA,CAAC;;AAEpB,uBAAe,GAAG,kCAAO,KAAK,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;;AAE/C,kDAAU,KAAK,EAAE,UAAC,KAAK,EAAE,MAAM,EAAK;AAChC,gBAAI,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,QAAQ,KAAK,QAAQ,EAAE;AAC7C,+BAAe,CAAC,MAAM,CAAC,GAAG,iCAAO,8BAAY,KAAK,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC;aACzF;SACJ,CAAC,CAAC;;AAEH,oBAAY,CAAC,IAAI,CAAC,sCAAM,eAAe,CAAC,CAAC,CAAC;KAC7C,CAAC,CAAC;;AAEH,WAAO,YAAY,CAAC;CACvB","file":"calculateRowSpanIndex.js","sourcesContent":["import _ from 'lodash';\nimport stringWidth from 'string-width';\n\n/**\n * @param {Array[]} rows\n * @param {Object} config\n * @return {Number[]}\n */\nexport default (rows, config) => {\n    let rowSpanIndex,\n        tableWidth;\n\n    tableWidth = rows[0].length;\n\n    rowSpanIndex = [];\n\n    _.map(rows, (cells) => {\n        let cellHeightIndex;\n\n        cellHeightIndex = _.fill(Array(tableWidth), 1);\n\n        _.forEach(cells, (value, index1) => {\n            if (config.column[index1].maxWidth !== Infinity) {\n                cellHeightIndex[index1] = _.ceil(stringWidth(value) / config.column[index1].maxWidth);\n            }\n        });\n\n        rowSpanIndex.push(_.max(cellHeightIndex));\n    });\n\n    return rowSpanIndex;\n};\n"],"sourceRoot":"/source/"}